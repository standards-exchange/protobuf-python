"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.type.date_pb2
import google.type.money_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class RT000FTL8(google.protobuf.message.Message):
    """Fund Accounting KPI Report for governance oversight and reporting for UCITS funds"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class AssetsUnderManagement(google.protobuf.message.Message):
        """The Assets Under Management Definition"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        AUM_BASE_CURRENCY_FIELD_NUMBER: builtins.int
        AUM_REPORTING_CURRENCY_FIELD_NUMBER: builtins.int
        MONTHLY_CHANGE_AUM_BASE_CURRENCY_FIELD_NUMBER: builtins.int
        MONTHLY_CHANGE_AUM_REPORTING_CURRENCY_FIELD_NUMBER: builtins.int
        QUARTERLY_CHANGE_AUM_BASE_CURRENCY_FIELD_NUMBER: builtins.int
        QUARTERLY_CHANGE_AUM_REPORTING_CURRENCY_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The effective date"""
        @property
        def aum_base_currency(self) -> google.type.money_pb2.Money:
            """The assets under management as of the effective date in the base currency of the fund"""
        @property
        def aum_reporting_currency(self) -> google.type.money_pb2.Money:
            """The assets under management as of the effective date in the reporting currency"""
        @property
        def monthly_change_aum_base_currency(self) -> google.type.money_pb2.Money:
            """The change in AUM from the previous month in assets under management as of the effective date in the base currency of the fund"""
        @property
        def monthly_change_aum_reporting_currency(self) -> google.type.money_pb2.Money:
            """The change in AUM from the previous month in assets under management as of the effective date in the reporting currency"""
        @property
        def quarterly_change_aum_base_currency(self) -> google.type.money_pb2.Money:
            """The change in AUM from the previous quarter in assets under management as of the effective date in the base currency of the fund"""
        @property
        def quarterly_change_aum_reporting_currency(self) -> google.type.money_pb2.Money:
            """The change in AUM from the previous quarter in assets under management as of the effective date in the reporting currency"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            aum_base_currency: google.type.money_pb2.Money | None = ...,
            aum_reporting_currency: google.type.money_pb2.Money | None = ...,
            monthly_change_aum_base_currency: google.type.money_pb2.Money | None = ...,
            monthly_change_aum_reporting_currency: google.type.money_pb2.Money | None = ...,
            quarterly_change_aum_base_currency: google.type.money_pb2.Money | None = ...,
            quarterly_change_aum_reporting_currency: google.type.money_pb2.Money | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["aum_base_currency", b"aum_base_currency", "aum_reporting_currency", b"aum_reporting_currency", "effective_date", b"effective_date", "monthly_change_aum_base_currency", b"monthly_change_aum_base_currency", "monthly_change_aum_reporting_currency", b"monthly_change_aum_reporting_currency", "quarterly_change_aum_base_currency", b"quarterly_change_aum_base_currency", "quarterly_change_aum_reporting_currency", b"quarterly_change_aum_reporting_currency"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["aum_base_currency", b"aum_base_currency", "aum_reporting_currency", b"aum_reporting_currency", "effective_date", b"effective_date", "monthly_change_aum_base_currency", b"monthly_change_aum_base_currency", "monthly_change_aum_reporting_currency", b"monthly_change_aum_reporting_currency", "quarterly_change_aum_base_currency", b"quarterly_change_aum_base_currency", "quarterly_change_aum_reporting_currency", b"quarterly_change_aum_reporting_currency"]) -> None: ...

    @typing_extensions.final
    class NAVTimeliness(google.protobuf.message.Message):
        """Definition of NAV timeliness information to be provided each month"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        YEAR_FIELD_NUMBER: builtins.int
        MONTH_FIELD_NUMBER: builtins.int
        PERCENT_NAV_TIMELINESS_FIELD_NUMBER: builtins.int
        COMMENTS_FIELD_NUMBER: builtins.int
        year: builtins.int
        """The year for which the NAV timeliness is being reported"""
        month: builtins.int
        """The month for which the NAV timeliness is being reported"""
        percent_nav_timeliness: builtins.float
        """Nav timeliness this reporting period"""
        comments: builtins.str
        """Comments from the fund accounting delegate on NAV timeliness"""
        def __init__(
            self,
            *,
            year: builtins.int = ...,
            month: builtins.int = ...,
            percent_nav_timeliness: builtins.float = ...,
            comments: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["comments", b"comments", "month", b"month", "percent_nav_timeliness", b"percent_nav_timeliness", "year", b"year"]) -> None: ...

    @typing_extensions.final
    class NAVCalculationError(google.protobuf.message.Message):
        """Definition of a NAV calculation error"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        IDENTIFICATION_DATE_FIELD_NUMBER: builtins.int
        RESOLUTION_DATE_FIELD_NUMBER: builtins.int
        MAGNITUDE_FIELD_NUMBER: builtins.int
        CAUSE_FIELD_NUMBER: builtins.int
        REMEDIATION_FIELD_NUMBER: builtins.int
        COMMENTS_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The date of the error"""
        @property
        def identification_date(self) -> google.type.date_pb2.Date:
            """The date the error was identified"""
        @property
        def resolution_date(self) -> google.type.date_pb2.Date:
            """The date the error was resolved"""
        magnitude: builtins.float
        """Magnitude of the error in decimal (IncorrectNav / CorrectNav -1)"""
        cause: builtins.str
        """Cause of the error"""
        remediation: builtins.str
        """Remediation"""
        @property
        def comments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Other Comments"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            identification_date: google.type.date_pb2.Date | None = ...,
            resolution_date: google.type.date_pb2.Date | None = ...,
            magnitude: builtins.float = ...,
            cause: builtins.str = ...,
            remediation: builtins.str = ...,
            comments: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "identification_date", b"identification_date", "resolution_date", b"resolution_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cause", b"cause", "comments", b"comments", "effective_date", b"effective_date", "identification_date", b"identification_date", "magnitude", b"magnitude", "remediation", b"remediation", "resolution_date", b"resolution_date"]) -> None: ...

    @typing_extensions.final
    class SecurityPricingError(google.protobuf.message.Message):
        """Definition of a pricing error occurred in the pricing of a share class"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _FinancialInstrumentIdentifier:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _FinancialInstrumentIdentifierEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            IDENTIFIER_UNSPECIFIED: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 0
            """Source not specified by the user."""
            ISIN: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 1
            """ISO 6166 code of ISIN when available"""
            CUSIP: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 2
            """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
            SEDOL: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 3
            """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
            WKN: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 4
            """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
            BBG_TICKER: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 5
            """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
            BBGID: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 6
            """BBGID (The Bloomberg Global ID)"""
            RIC: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 7
            """Reuters RIC (Reuters instrument code)"""
            FIGI: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 8
            """FIGI (Financial_Instrument Global Identifier)"""
            LEI: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 9
            """LEI 0 Legal Entity Identifier"""
            PERM_ID: RT000FTL8.SecurityPricingError._FinancialInstrumentIdentifier.ValueType  # 10
            """PermID - Refinitiv Permanent Identifiers"""

        class FinancialInstrumentIdentifier(_FinancialInstrumentIdentifier, metaclass=_FinancialInstrumentIdentifierEnumTypeWrapper):
            """Enumerations of financial identifiers"""

        IDENTIFIER_UNSPECIFIED: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 0
        """Source not specified by the user."""
        ISIN: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 1
        """ISO 6166 code of ISIN when available"""
        CUSIP: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 2
        """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
        SEDOL: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 3
        """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
        WKN: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 4
        """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
        BBG_TICKER: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 5
        """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
        BBGID: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 6
        """BBGID (The Bloomberg Global ID)"""
        RIC: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 7
        """Reuters RIC (Reuters instrument code)"""
        FIGI: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 8
        """FIGI (Financial_Instrument Global Identifier)"""
        LEI: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 9
        """LEI 0 Legal Entity Identifier"""
        PERM_ID: RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType  # 10
        """PermID - Refinitiv Permanent Identifiers"""

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        IDENTIFICATION_DATE_FIELD_NUMBER: builtins.int
        RESOLUTION_DATE_FIELD_NUMBER: builtins.int
        FINANCIAL_IDENTIFIER_FIELD_NUMBER: builtins.int
        INSTRUMENT_FIELD_NUMBER: builtins.int
        MATERIALITY_FIELD_NUMBER: builtins.int
        CAUSE_FIELD_NUMBER: builtins.int
        REMEDIATION_FIELD_NUMBER: builtins.int
        COMMENT_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The date of the error"""
        @property
        def identification_date(self) -> google.type.date_pb2.Date:
            """The date the error was identified"""
        @property
        def resolution_date(self) -> google.type.date_pb2.Date:
            """The date the error was resolved"""
        financial_identifier: global___RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType
        """Codification chosen to identify the financial instrument"""
        instrument: builtins.str
        """Identifier of the affected instrument"""
        materiality: builtins.float
        """Magnitude of the error in decimal (position / nav -1)"""
        cause: builtins.str
        """Cause of the error"""
        remediation: builtins.str
        """Remediation"""
        @property
        def comment(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Comments"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            identification_date: google.type.date_pb2.Date | None = ...,
            resolution_date: google.type.date_pb2.Date | None = ...,
            financial_identifier: global___RT000FTL8.SecurityPricingError.FinancialInstrumentIdentifier.ValueType = ...,
            instrument: builtins.str = ...,
            materiality: builtins.float = ...,
            cause: builtins.str = ...,
            remediation: builtins.str = ...,
            comment: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "identification_date", b"identification_date", "resolution_date", b"resolution_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cause", b"cause", "comment", b"comment", "effective_date", b"effective_date", "financial_identifier", b"financial_identifier", "identification_date", b"identification_date", "instrument", b"instrument", "materiality", b"materiality", "remediation", b"remediation", "resolution_date", b"resolution_date"]) -> None: ...

    @typing_extensions.final
    class StaleSecurity(google.protobuf.message.Message):
        """Definition of a stale security"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _FinancialInstrumentIdentifier:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _FinancialInstrumentIdentifierEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            IDENTIFIER_UNSPECIFIED: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 0
            """Source not specified by the user."""
            ISIN: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 1
            """ISO 6166 code of ISIN when available"""
            CUSIP: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 2
            """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
            SEDOL: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 3
            """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
            WKN: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 4
            """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
            BBG_TICKER: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 5
            """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
            BBGID: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 6
            """BBGID (The Bloomberg Global ID)"""
            RIC: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 7
            """Reuters RIC (Reuters instrument code)"""
            FIGI: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 8
            """FIGI (Financial_Instrument Global Identifier)"""
            LEI: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 9
            """LEI 0 Legal Entity Identifier"""
            PERM_ID: RT000FTL8.StaleSecurity._FinancialInstrumentIdentifier.ValueType  # 10
            """PermID - Refinitiv Permanent Identifiers"""

        class FinancialInstrumentIdentifier(_FinancialInstrumentIdentifier, metaclass=_FinancialInstrumentIdentifierEnumTypeWrapper):
            """Enumerations of financial identifiers"""

        IDENTIFIER_UNSPECIFIED: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 0
        """Source not specified by the user."""
        ISIN: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 1
        """ISO 6166 code of ISIN when available"""
        CUSIP: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 2
        """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
        SEDOL: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 3
        """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
        WKN: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 4
        """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
        BBG_TICKER: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 5
        """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
        BBGID: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 6
        """BBGID (The Bloomberg Global ID)"""
        RIC: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 7
        """Reuters RIC (Reuters instrument code)"""
        FIGI: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 8
        """FIGI (Financial_Instrument Global Identifier)"""
        LEI: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 9
        """LEI 0 Legal Entity Identifier"""
        PERM_ID: RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType  # 10
        """PermID - Refinitiv Permanent Identifiers"""

        FINANCIAL_IDENTIFIER_FIELD_NUMBER: builtins.int
        INSTRUMENT_FIELD_NUMBER: builtins.int
        PRICE_LATEST_FIELD_NUMBER: builtins.int
        PRICE_LATEST_DATE_FIELD_NUMBER: builtins.int
        MATERIALITY_FIELD_NUMBER: builtins.int
        COMMENTS_FIELD_NUMBER: builtins.int
        financial_identifier: global___RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType
        """Codification chosen to identify the financial instrument"""
        instrument: builtins.str
        """Identifier of the affected instrument"""
        @property
        def price_latest(self) -> google.type.money_pb2.Money:
            """The date the security was last priced"""
        @property
        def price_latest_date(self) -> google.type.money_pb2.Money:
            """The staled date (i.e. the last priced date)"""
        materiality: builtins.float
        """Magnitude of the error in decimal (position / nav -1)"""
        @property
        def comments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Additional comments"""
        def __init__(
            self,
            *,
            financial_identifier: global___RT000FTL8.StaleSecurity.FinancialInstrumentIdentifier.ValueType = ...,
            instrument: builtins.str = ...,
            price_latest: google.type.money_pb2.Money | None = ...,
            price_latest_date: google.type.money_pb2.Money | None = ...,
            materiality: builtins.float = ...,
            comments: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["price_latest", b"price_latest", "price_latest_date", b"price_latest_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["comments", b"comments", "financial_identifier", b"financial_identifier", "instrument", b"instrument", "materiality", b"materiality", "price_latest", b"price_latest", "price_latest_date", b"price_latest_date"]) -> None: ...

    @typing_extensions.final
    class StockBreak(google.protobuf.message.Message):
        """Definition of a break that occurred in agreement on the non-cash holdings of a sub-fund"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _FinancialInstrumentIdentifier:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _FinancialInstrumentIdentifierEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            IDENTIFIER_UNSPECIFIED: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 0
            """Source not specified by the user."""
            ISIN: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 1
            """ISO 6166 code of ISIN when available"""
            CUSIP: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 2
            """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
            SEDOL: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 3
            """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
            WKN: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 4
            """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
            BBG_TICKER: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 5
            """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
            BBGID: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 6
            """BBGID (The Bloomberg Global ID)"""
            RIC: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 7
            """Reuters RIC (Reuters instrument code)"""
            FIGI: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 8
            """FIGI (Financial_Instrument Global Identifier)"""
            LEI: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 9
            """LEI 0 Legal Entity Identifier"""
            PERM_ID: RT000FTL8.StockBreak._FinancialInstrumentIdentifier.ValueType  # 10
            """PermID - Refinitiv Permanent Identifiers"""

        class FinancialInstrumentIdentifier(_FinancialInstrumentIdentifier, metaclass=_FinancialInstrumentIdentifierEnumTypeWrapper):
            """Enumerations of financial identifiers"""

        IDENTIFIER_UNSPECIFIED: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 0
        """Source not specified by the user."""
        ISIN: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 1
        """ISO 6166 code of ISIN when available"""
        CUSIP: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 2
        """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
        SEDOL: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 3
        """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
        WKN: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 4
        """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
        BBG_TICKER: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 5
        """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
        BBGID: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 6
        """BBGID (The Bloomberg Global ID)"""
        RIC: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 7
        """Reuters RIC (Reuters instrument code)"""
        FIGI: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 8
        """FIGI (Financial_Instrument Global Identifier)"""
        LEI: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 9
        """LEI 0 Legal Entity Identifier"""
        PERM_ID: RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType  # 10
        """PermID - Refinitiv Permanent Identifiers"""

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        IDENTIFICATION_DATE_FIELD_NUMBER: builtins.int
        RESOLUTION_DATE_FIELD_NUMBER: builtins.int
        FINANCIAL_IDENTIFIER_FIELD_NUMBER: builtins.int
        INSTRUMENT_FIELD_NUMBER: builtins.int
        MATERIALITY_FIELD_NUMBER: builtins.int
        CAUSE_FIELD_NUMBER: builtins.int
        REMEDIATION_FIELD_NUMBER: builtins.int
        COMMENT_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The date of the stock break"""
        @property
        def identification_date(self) -> google.type.date_pb2.Date:
            """The date the stock break was identified"""
        @property
        def resolution_date(self) -> google.type.date_pb2.Date:
            """The date the stock break was resolved"""
        financial_identifier: global___RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType
        """Codification chosen to identify the financial instrument"""
        instrument: builtins.str
        """Identifier of the affected instrument"""
        materiality: builtins.float
        """Magnitude of the error in decimal (position / nav -1)"""
        cause: builtins.str
        """Cause of the break"""
        remediation: builtins.str
        """Remediation"""
        @property
        def comment(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Comments"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            identification_date: google.type.date_pb2.Date | None = ...,
            resolution_date: google.type.date_pb2.Date | None = ...,
            financial_identifier: global___RT000FTL8.StockBreak.FinancialInstrumentIdentifier.ValueType = ...,
            instrument: builtins.str = ...,
            materiality: builtins.float = ...,
            cause: builtins.str = ...,
            remediation: builtins.str = ...,
            comment: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "identification_date", b"identification_date", "resolution_date", b"resolution_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cause", b"cause", "comment", b"comment", "effective_date", b"effective_date", "financial_identifier", b"financial_identifier", "identification_date", b"identification_date", "instrument", b"instrument", "materiality", b"materiality", "remediation", b"remediation", "resolution_date", b"resolution_date"]) -> None: ...

    @typing_extensions.final
    class CashBreak(google.protobuf.message.Message):
        """Definition of break that has occurred in agreement on the cash holdings of a sub-fund"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        IDENTIFICATION_DATE_FIELD_NUMBER: builtins.int
        RESOLUTION_DATE_FIELD_NUMBER: builtins.int
        MATERIALITY_FIELD_NUMBER: builtins.int
        CAUSE_FIELD_NUMBER: builtins.int
        REMEDIATION_FIELD_NUMBER: builtins.int
        COMMENT_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The date of the stock break"""
        @property
        def identification_date(self) -> google.type.date_pb2.Date:
            """The date the stock break was identified"""
        @property
        def resolution_date(self) -> google.type.date_pb2.Date:
            """The date the stock break was resolved"""
        materiality: builtins.float
        """Magnitude of the error in decimal (position / nav -1)"""
        cause: builtins.str
        """Cause of the break"""
        remediation: builtins.str
        """Remediation"""
        @property
        def comment(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Comments"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            identification_date: google.type.date_pb2.Date | None = ...,
            resolution_date: google.type.date_pb2.Date | None = ...,
            materiality: builtins.float = ...,
            cause: builtins.str = ...,
            remediation: builtins.str = ...,
            comment: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "identification_date", b"identification_date", "resolution_date", b"resolution_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["cause", b"cause", "comment", b"comment", "effective_date", b"effective_date", "identification_date", b"identification_date", "materiality", b"materiality", "remediation", b"remediation", "resolution_date", b"resolution_date"]) -> None: ...

    @typing_extensions.final
    class TotalExpenseRatio(google.protobuf.message.Message):
        """Definition of a Total Expense Ratio"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _ShareClassIdentifierTypes:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _ShareClassIdentifierTypesEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType], builtins.type):  # noqa: F821
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            IDENTIFIER_UNSPECIFIED: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 0
            """Source not specified by the user."""
            ISIN: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 1
            """ISO 6166 code of ISIN when available"""
            CUSIP: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 2
            """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
            SEDOL: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 3
            """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
            WKN: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 4
            """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
            BBG_TICKER: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 5
            """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
            BBGID: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 6
            """BBGID (The Bloomberg Global ID)"""
            RIC: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 7
            """Reuters RIC (Reuters instrument code)"""
            FIGI: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 8
            """FIGI (Financial_Instrument Global Identifier)"""
            LEI: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 9
            """LEI 0 Legal Entity Identifier"""
            PERM_ID: RT000FTL8.TotalExpenseRatio._ShareClassIdentifierTypes.ValueType  # 10
            """PermID - Refinitiv Permanent Identifiers"""

        class ShareClassIdentifierTypes(_ShareClassIdentifierTypes, metaclass=_ShareClassIdentifierTypesEnumTypeWrapper):
            """Enumerations of financial identifiers"""

        IDENTIFIER_UNSPECIFIED: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 0
        """Source not specified by the user."""
        ISIN: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 1
        """ISO 6166 code of ISIN when available"""
        CUSIP: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 2
        """CUSIP (The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies)"""
        SEDOL: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 3
        """SEDOL (Stock Exchange Daily Official List for the London Stock Exchange)"""
        WKN: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 4
        """WKN (Wertpapier Kenn-Nummer, the alphanumeric German identification number)"""
        BBG_TICKER: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 5
        """Bloomberg Ticker (Bloomberg letters code that identify a company's securities)"""
        BBGID: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 6
        """BBGID (The Bloomberg Global ID)"""
        RIC: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 7
        """Reuters RIC (Reuters instrument code)"""
        FIGI: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 8
        """FIGI (Financial_Instrument Global Identifier)"""
        LEI: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 9
        """LEI 0 Legal Entity Identifier"""
        PERM_ID: RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType  # 10
        """PermID - Refinitiv Permanent Identifiers"""

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        SHARE_CLASS_ID_FIELD_NUMBER: builtins.int
        SHARE_CLASS_ID_TYPE_FIELD_NUMBER: builtins.int
        SHARE_CLASS_EXTENSION_FIELD_NUMBER: builtins.int
        TER_CURRENT_MONTH_FIELD_NUMBER: builtins.int
        TER_CURRENT_MONTH_ANNUALIZED_FIELD_NUMBER: builtins.int
        TER_YTD_FIELD_NUMBER: builtins.int
        TER_YTD_ANNUALIZED_FIELD_NUMBER: builtins.int
        COMMENTS_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The date of the TER (should be the last day of the relevant month)"""
        share_class_id: builtins.str
        """The global identifier of the share class"""
        share_class_id_type: global___RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType
        """Codification chosen to identify the share class"""
        share_class_extension: builtins.str
        """Extension that identifies the share class.
        Should conform to: https://openfunds.org/OFST020050 (Share Class Extension)
        """
        ter_current_month: builtins.float
        """The expense ratio over the current calendar month"""
        ter_current_month_annualized: builtins.float
        """The monthly expense ratio annualized"""
        ter_ytd: builtins.float
        """The expense ratio YTD"""
        ter_ytd_annualized: builtins.float
        """The YTD expense ratio annualized"""
        @property
        def comments(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """Comments on the expense ratio"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            share_class_id: builtins.str = ...,
            share_class_id_type: global___RT000FTL8.TotalExpenseRatio.ShareClassIdentifierTypes.ValueType = ...,
            share_class_extension: builtins.str = ...,
            ter_current_month: builtins.float = ...,
            ter_current_month_annualized: builtins.float = ...,
            ter_ytd: builtins.float = ...,
            ter_ytd_annualized: builtins.float = ...,
            comments: collections.abc.Iterable[builtins.str] | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["comments", b"comments", "effective_date", b"effective_date", "share_class_extension", b"share_class_extension", "share_class_id", b"share_class_id", "share_class_id_type", b"share_class_id_type", "ter_current_month", b"ter_current_month", "ter_current_month_annualized", b"ter_current_month_annualized", "ter_ytd", b"ter_ytd", "ter_ytd_annualized", b"ter_ytd_annualized"]) -> None: ...

    @typing_extensions.final
    class Invoice(google.protobuf.message.Message):
        """Definition of an invoice"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        INVOICE_DATE_FIELD_NUMBER: builtins.int
        AUTHORISATION_DATE_FIELD_NUMBER: builtins.int
        PAYMENT_DATE_FIELD_NUMBER: builtins.int
        INVOICE_IDENTIFIER_FIELD_NUMBER: builtins.int
        RECIPIENT_FIELD_NUMBER: builtins.int
        FEE_TYPE_FIELD_NUMBER: builtins.int
        INVOICED_AMOUNT_FIELD_NUMBER: builtins.int
        FUND_SPECIFIC_AMOUNT_FIELD_NUMBER: builtins.int
        @property
        def invoice_date(self) -> google.type.date_pb2.Date:
            """The invoice date"""
        @property
        def authorisation_date(self) -> google.type.date_pb2.Date:
            """The date of authorisation"""
        @property
        def payment_date(self) -> google.type.date_pb2.Date:
            """The date of payment"""
        invoice_identifier: builtins.str
        """The invoice number or identifier"""
        recipient: builtins.str
        """The Recipient of the invoice"""
        fee_type: builtins.str
        """The type of fee"""
        @property
        def invoiced_amount(self) -> google.type.money_pb2.Money:
            """The invoiced amount"""
        @property
        def fund_specific_amount(self) -> google.type.money_pb2.Money:
            """The invoiced amount specific to the fund in question"""
        def __init__(
            self,
            *,
            invoice_date: google.type.date_pb2.Date | None = ...,
            authorisation_date: google.type.date_pb2.Date | None = ...,
            payment_date: google.type.date_pb2.Date | None = ...,
            invoice_identifier: builtins.str = ...,
            recipient: builtins.str = ...,
            fee_type: builtins.str = ...,
            invoiced_amount: google.type.money_pb2.Money | None = ...,
            fund_specific_amount: google.type.money_pb2.Money | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["authorisation_date", b"authorisation_date", "fund_specific_amount", b"fund_specific_amount", "invoice_date", b"invoice_date", "invoiced_amount", b"invoiced_amount", "payment_date", b"payment_date"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["authorisation_date", b"authorisation_date", "fee_type", b"fee_type", "fund_specific_amount", b"fund_specific_amount", "invoice_date", b"invoice_date", "invoice_identifier", b"invoice_identifier", "invoiced_amount", b"invoiced_amount", "payment_date", b"payment_date", "recipient", b"recipient"]) -> None: ...

    @typing_extensions.final
    class SwingPricingEvent(google.protobuf.message.Message):
        """Definition of a Swing Pricing Events."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
        SWING_THRESHOLD_FIELD_NUMBER: builtins.int
        SWING_FACTOR_FIELD_NUMBER: builtins.int
        NAV_WITHOUT_SWING_FACTOR_FIELD_NUMBER: builtins.int
        NAV_WITH_SWING_FACTOR_FIELD_NUMBER: builtins.int
        @property
        def effective_date(self) -> google.type.date_pb2.Date:
            """The effective date on which swing pricing was applied"""
        @property
        def swing_threshold(self) -> google.type.money_pb2.Money:
            """The threshold that was used to evaluate whether swing pricing should be applied"""
        swing_factor: builtins.float
        """The adjustment factor applied to the nav to account for the anticipated effective of subscriptions or redemptions"""
        @property
        def nav_without_swing_factor(self) -> google.type.money_pb2.Money:
            """The NAV before the swing factor had been applied"""
        @property
        def nav_with_swing_factor(self) -> google.type.money_pb2.Money:
            """The NAV after the swing factor had been applied"""
        def __init__(
            self,
            *,
            effective_date: google.type.date_pb2.Date | None = ...,
            swing_threshold: google.type.money_pb2.Money | None = ...,
            swing_factor: builtins.float = ...,
            nav_without_swing_factor: google.type.money_pb2.Money | None = ...,
            nav_with_swing_factor: google.type.money_pb2.Money | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "nav_with_swing_factor", b"nav_with_swing_factor", "nav_without_swing_factor", b"nav_without_swing_factor", "swing_threshold", b"swing_threshold"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "nav_with_swing_factor", b"nav_with_swing_factor", "nav_without_swing_factor", b"nav_without_swing_factor", "swing_factor", b"swing_factor", "swing_threshold", b"swing_threshold"]) -> None: ...

    EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
    PRODUCTION_DATE_FIELD_NUMBER: builtins.int
    VALUATION_DATE_FIELD_NUMBER: builtins.int
    UMBRELLA_FUND_FIELD_NUMBER: builtins.int
    FUND_FIELD_NUMBER: builtins.int
    ASSETS_UNDER_MANAGEMENT_MONTHLY_FIELD_NUMBER: builtins.int
    NAV_TIMELINESS_MONTHLY_FIELD_NUMBER: builtins.int
    NAV_CALCULATION_ERRORS_FIELD_NUMBER: builtins.int
    SECURITY_PRICING_ERRORS_FIELD_NUMBER: builtins.int
    STALE_SECURITIES_FIELD_NUMBER: builtins.int
    STOCK_BREAKS_FIELD_NUMBER: builtins.int
    CASH_BREAKS_FIELD_NUMBER: builtins.int
    TOTAL_EXPENSE_RATIOS_FIELD_NUMBER: builtins.int
    RECENT_INVOICES_FIELD_NUMBER: builtins.int
    SWING_PRICING_EVENTS_FIELD_NUMBER: builtins.int
    @property
    def effective_date(self) -> google.type.date_pb2.Date:
        """The effective date as of which the data is accurate"""
    @property
    def production_date(self) -> google.type.date_pb2.Date:
        """The date data was produced"""
    @property
    def valuation_date(self) -> google.type.date_pb2.Date:
        """The date of the latest portfolio valuation"""
    umbrella_fund: builtins.str
    """The legal identifier of the umbrella
    Should conform to: https://openfunds.org/OFST005010 (Umbrella)
    See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
    """
    fund: builtins.str
    """Name of the relevant sub-fund
    Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
    Refers to the Sub-Fund in the case of an umbrella structure
    or Fund in the case of a standalone structure
    See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
    """
    @property
    def assets_under_management_monthly(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.AssetsUnderManagement]:
        """Time series of historic AUM data
        Convention is to provide 12 months of history
        """
    @property
    def nav_timeliness_monthly(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.NAVTimeliness]:
        """The time series of historic NAV timeliness on a monthly basis
        Convention is to provide 12 months of history
        """
    @property
    def nav_calculation_errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.NAVCalculationError]:
        """Recent NAV Calculation Errors.
        Convention is to provide 12 months of history
        """
    @property
    def security_pricing_errors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.SecurityPricingError]:
        """Recent instrument pricing errors. Convention is to provide 12 months of history."""
    @property
    def stale_securities(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.StaleSecurity]:
        """Stale prices as of effective date"""
    @property
    def stock_breaks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.StockBreak]:
        """Recent Stock Breaks greater than 5 days. Convention is to provide 12 months of history."""
    @property
    def cash_breaks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.CashBreak]:
        """Recent Cash Breaks greater than 5 days. Convention is to provide 12 months of history."""
    @property
    def total_expense_ratios(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.TotalExpenseRatio]:
        """The timeseries of TERs per share class. Convention is to provide 12 months of history."""
    @property
    def recent_invoices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.Invoice]:
        """Recent invoices paid. Convention is to provide 6 months of history."""
    @property
    def swing_pricing_events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8.SwingPricingEvent]:
        """The list of Swing Pricing events within the fund. Convention is to provide 12 months history. Swing pricing is a method used by collective investment schemes to adjust the net asset value (NAV) of the fund in order to protect existing shareholders from the negative impact of large purchases or redemptions by new or existing shareholders. This is done by adjusting the NAV of the fund to reflect the anticipated costs associated with buying or selling the underlying assets of the fund. The adjustment is typically made by charging or crediting a "swing factor" to the NAV of the fund, which is based on the size of the purchase or redemption relative to the fund's assets under management (AUM). The goal of swing pricing is to ensure that the costs of buying and selling assets are borne by those who cause the costs, rather than by all shareholders of the fund."""
    def __init__(
        self,
        *,
        effective_date: google.type.date_pb2.Date | None = ...,
        production_date: google.type.date_pb2.Date | None = ...,
        valuation_date: google.type.date_pb2.Date | None = ...,
        umbrella_fund: builtins.str = ...,
        fund: builtins.str = ...,
        assets_under_management_monthly: collections.abc.Iterable[global___RT000FTL8.AssetsUnderManagement] | None = ...,
        nav_timeliness_monthly: collections.abc.Iterable[global___RT000FTL8.NAVTimeliness] | None = ...,
        nav_calculation_errors: collections.abc.Iterable[global___RT000FTL8.NAVCalculationError] | None = ...,
        security_pricing_errors: collections.abc.Iterable[global___RT000FTL8.SecurityPricingError] | None = ...,
        stale_securities: collections.abc.Iterable[global___RT000FTL8.StaleSecurity] | None = ...,
        stock_breaks: collections.abc.Iterable[global___RT000FTL8.StockBreak] | None = ...,
        cash_breaks: collections.abc.Iterable[global___RT000FTL8.CashBreak] | None = ...,
        total_expense_ratios: collections.abc.Iterable[global___RT000FTL8.TotalExpenseRatio] | None = ...,
        recent_invoices: collections.abc.Iterable[global___RT000FTL8.Invoice] | None = ...,
        swing_pricing_events: collections.abc.Iterable[global___RT000FTL8.SwingPricingEvent] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["effective_date", b"effective_date", "production_date", b"production_date", "valuation_date", b"valuation_date"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["assets_under_management_monthly", b"assets_under_management_monthly", "cash_breaks", b"cash_breaks", "effective_date", b"effective_date", "fund", b"fund", "nav_calculation_errors", b"nav_calculation_errors", "nav_timeliness_monthly", b"nav_timeliness_monthly", "production_date", b"production_date", "recent_invoices", b"recent_invoices", "security_pricing_errors", b"security_pricing_errors", "stale_securities", b"stale_securities", "stock_breaks", b"stock_breaks", "swing_pricing_events", b"swing_pricing_events", "total_expense_ratios", b"total_expense_ratios", "umbrella_fund", b"umbrella_fund", "valuation_date", b"valuation_date"]) -> None: ...

global___RT000FTL8 = RT000FTL8

@typing_extensions.final
class RT000FTL8_batch(google.protobuf.message.Message):
    """Batch set of RT000FTL8 responses"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_FIELD_NUMBER: builtins.int
    @property
    def response(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT000FTL8]: ...
    def __init__(
        self,
        *,
        response: collections.abc.Iterable[global___RT000FTL8] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["response", b"response"]) -> None: ...

global___RT000FTL8_batch = RT000FTL8_batch
