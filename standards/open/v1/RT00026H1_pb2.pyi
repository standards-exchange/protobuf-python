"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.type.date_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class RT00026H1(google.protobuf.message.Message):
    """Fund Holding"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _AssetCategory:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _AssetCategoryEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[RT00026H1._AssetCategory.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ASSET_CATEGORY_UNSPECIFIED: RT00026H1._AssetCategory.ValueType  # 0
        """Source not specified by the user."""
        ASSET: RT00026H1._AssetCategory.ValueType  # 1
        """Asset"""
        CASH: RT00026H1._AssetCategory.ValueType  # 2
        """Cash"""
        CASH_EQUIVALENT: RT00026H1._AssetCategory.ValueType  # 3
        """Cash Equivalent"""
        EQUITY: RT00026H1._AssetCategory.ValueType  # 4
        """Equity"""
        FIXED_INCOME: RT00026H1._AssetCategory.ValueType  # 7
        """Fixed Income"""
        FOREIGN_EXCHANGE: RT00026H1._AssetCategory.ValueType  # 8
        """Forex"""
        FUTURE: RT00026H1._AssetCategory.ValueType  # 9
        """Future"""
        LIABILITY: RT00026H1._AssetCategory.ValueType  # 10
        """Other Liabilities"""
        OPTION: RT00026H1._AssetCategory.ValueType  # 11
        """Options"""

    class AssetCategory(_AssetCategory, metaclass=_AssetCategoryEnumTypeWrapper):
        """Enumerations of asset categories"""

    ASSET_CATEGORY_UNSPECIFIED: RT00026H1.AssetCategory.ValueType  # 0
    """Source not specified by the user."""
    ASSET: RT00026H1.AssetCategory.ValueType  # 1
    """Asset"""
    CASH: RT00026H1.AssetCategory.ValueType  # 2
    """Cash"""
    CASH_EQUIVALENT: RT00026H1.AssetCategory.ValueType  # 3
    """Cash Equivalent"""
    EQUITY: RT00026H1.AssetCategory.ValueType  # 4
    """Equity"""
    FIXED_INCOME: RT00026H1.AssetCategory.ValueType  # 7
    """Fixed Income"""
    FOREIGN_EXCHANGE: RT00026H1.AssetCategory.ValueType  # 8
    """Forex"""
    FUTURE: RT00026H1.AssetCategory.ValueType  # 9
    """Future"""
    LIABILITY: RT00026H1.AssetCategory.ValueType  # 10
    """Other Liabilities"""
    OPTION: RT00026H1.AssetCategory.ValueType  # 11
    """Options"""

    EFFECTIVE_DATE_FIELD_NUMBER: builtins.int
    UMBRELLA_FUND_FIELD_NUMBER: builtins.int
    FUND_FIELD_NUMBER: builtins.int
    FUND_CURRENCY_FIELD_NUMBER: builtins.int
    INTERNAL_ASSET_ID_FIELD_NUMBER: builtins.int
    EXTERNAL_ASSET_ID_ISIN_FIELD_NUMBER: builtins.int
    EXTERNAL_ASSET_ID_CUSIP_FIELD_NUMBER: builtins.int
    EXTERNAL_ASSET_ID_SEDOL_FIELD_NUMBER: builtins.int
    EXTERNAL_ASSET_ID_FIGI_FIELD_NUMBER: builtins.int
    EXTERNAL_ASSET_ID_PERMID_FIELD_NUMBER: builtins.int
    EXTERNAL_EXCHANGE_ID_MIC_FIELD_NUMBER: builtins.int
    EXTERNAL_EXCHANGE_ID_BB_EXCHANGE_CODE_FIELD_NUMBER: builtins.int
    ASSET_CATEGORY_FIELD_NUMBER: builtins.int
    LOCAL_CURRENCY_CODE_FIELD_NUMBER: builtins.int
    QUANTITY_FIELD_NUMBER: builtins.int
    PRICE_LCU_FIELD_NUMBER: builtins.int
    PRICE_BASE_FIELD_NUMBER: builtins.int
    MARKET_VALUE_BASE_FIELD_NUMBER: builtins.int
    FUND_NAV_FIELD_NUMBER: builtins.int
    PERCENT_NAV_FIELD_NUMBER: builtins.int
    AS_OF_DATE_FIELD_NUMBER: builtins.int
    @property
    def effective_date(self) -> google.type.date_pb2.Date:
        """The effective date of the holding.
        The holdings are as of market close on the effective date
        """
    umbrella_fund: builtins.str
    """The legal identifier of the umbrella
    Should conform to: https://openfunds.org/OFST005010 (Umbrella)
    See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
    """
    fund: builtins.str
    """Name of the relevant sub-fund
    Should conform to: https://openfunds.org/OFST010110 (Legal Fund Name Only)
    Refers to the Sub-Fund in the case of an umbrella structure
    or Fund in the case of a standalone structure
    See: https://openfunds.org/knowledge/whitepapers/fundnames/ for more information
    """
    fund_currency: builtins.str
    """The ISO compliant three character code for the base currency of the fund"""
    internal_asset_id: builtins.str
    """The internalID used by the system producing the data"""
    external_asset_id_isin: builtins.str
    """ISO 6166 code of ISIN when available. If an ISIN is used, it is recommended that the MIC or Bloomberg Exchange Code should additionally be populated. This combination allows for a fund holding to be uniquely identified."""
    external_asset_id_cusip: builtins.str
    """CUSIP - The Committee on Uniform Securities Identification Procedures number assigned by the CUSIP Service Bureau for U.S. and Canadian companies when available. If a CUSIP is used, it is recommended that the MIC or Bloomberg Exchange Code should additionally be populated. This combination allows for a fund holding to be uniquely identified."""
    external_asset_id_sedol: builtins.str
    """SEDOL - Stock Exchange Daily Official List for the London Stock Exchange (when available). If a SEDOL is used, it is recommended that the MIC or Bloomberg Exchange Code should additionally be populated. This combination allows for a fund holding to be uniquely identified."""
    external_asset_id_figi: builtins.str
    """FIGI - Financial Instrument Global Identifier (when available)"""
    external_asset_id_permid: builtins.str
    """PermID - Refinitiv Permanent Identifiers (when available)"""
    external_exchange_id_mic: builtins.str
    """MIC - Market identifier code as defined by ISO 10383 (available at https://www.iso20022.org/market-identifier-codes) (when available)"""
    external_exchange_id_bb_exchange_code: builtins.str
    """Bloomberg Exchange Code - Two digit market identifier code as defined by Bloomberg (when available)"""
    asset_category: global___RT00026H1.AssetCategory.ValueType
    """The asset category of the holding"""
    local_currency_code: builtins.str
    """The ISO compliant three character local currency code of the asset"""
    quantity: builtins.float
    """The quantity of the asset held"""
    price_lcu: builtins.float
    """price in local currency units"""
    price_base: builtins.float
    """price in fund currency units"""
    market_value_base: builtins.float
    """the total market value in fund currency units"""
    fund_nav: builtins.float
    """the total net asset value of the fund on the effective date in base currency units"""
    percent_nav: builtins.float
    """the percentage weight of total net asset value"""
    @property
    def as_of_date(self) -> google.type.date_pb2.Date:
        """The date as of which the holdings record was produced."""
    def __init__(
        self,
        *,
        effective_date: google.type.date_pb2.Date | None = ...,
        umbrella_fund: builtins.str = ...,
        fund: builtins.str = ...,
        fund_currency: builtins.str = ...,
        internal_asset_id: builtins.str = ...,
        external_asset_id_isin: builtins.str = ...,
        external_asset_id_cusip: builtins.str = ...,
        external_asset_id_sedol: builtins.str = ...,
        external_asset_id_figi: builtins.str = ...,
        external_asset_id_permid: builtins.str = ...,
        external_exchange_id_mic: builtins.str = ...,
        external_exchange_id_bb_exchange_code: builtins.str = ...,
        asset_category: global___RT00026H1.AssetCategory.ValueType = ...,
        local_currency_code: builtins.str = ...,
        quantity: builtins.float = ...,
        price_lcu: builtins.float = ...,
        price_base: builtins.float = ...,
        market_value_base: builtins.float = ...,
        fund_nav: builtins.float = ...,
        percent_nav: builtins.float = ...,
        as_of_date: google.type.date_pb2.Date | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["as_of_date", b"as_of_date", "effective_date", b"effective_date"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["as_of_date", b"as_of_date", "asset_category", b"asset_category", "effective_date", b"effective_date", "external_asset_id_cusip", b"external_asset_id_cusip", "external_asset_id_figi", b"external_asset_id_figi", "external_asset_id_isin", b"external_asset_id_isin", "external_asset_id_permid", b"external_asset_id_permid", "external_asset_id_sedol", b"external_asset_id_sedol", "external_exchange_id_bb_exchange_code", b"external_exchange_id_bb_exchange_code", "external_exchange_id_mic", b"external_exchange_id_mic", "fund", b"fund", "fund_currency", b"fund_currency", "fund_nav", b"fund_nav", "internal_asset_id", b"internal_asset_id", "local_currency_code", b"local_currency_code", "market_value_base", b"market_value_base", "percent_nav", b"percent_nav", "price_base", b"price_base", "price_lcu", b"price_lcu", "quantity", b"quantity", "umbrella_fund", b"umbrella_fund"]) -> None: ...

global___RT00026H1 = RT00026H1

@typing_extensions.final
class RT00026H1_batch(google.protobuf.message.Message):
    """Batch set of RT00026H1 responses"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESPONSE_FIELD_NUMBER: builtins.int
    @property
    def response(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RT00026H1]: ...
    def __init__(
        self,
        *,
        response: collections.abc.Iterable[global___RT00026H1] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["response", b"response"]) -> None: ...

global___RT00026H1_batch = RT00026H1_batch
